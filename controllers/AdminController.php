<?php
/**
 * Created by PhpStorm.
 * User: Ace
 * Date: 04.01.2019
 * Time: 22:35
 */

namespace app\controllers;

use app\models\IncomeCategory;
use app\models\IncomeOperation;
use app\models\OutcomeCategory;
use app\models\OutcomeOperation;
use app\models\Role;
use Yii;
use yii\helpers\Json;
use app\models\User;

class AdminController extends AppController
{

    public function beforeAction($action)
    {
        if(Yii::$app->user->isGuest){
            $this->redirect(['site/login']);
        }
        if(!Yii::$app->user->isGuest){
            $id = Yii::$app->user->getId();
            $user = User::findOne($id);
            $role_id = $user->getUserRole();
            if(Role::findOne($role_id)->roleName != 'admin'){
                echo 'You are not allowed to this page!';
            }
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex(){
        return $this->render('index');
    }

    public function actionFamilyMembers(){
        $this->view->title = 'Admin | Члены Семьи';
        $members = User::find()->asArray()->all();

        return $this->render('familyMembers', compact('members'));

    }

    public function actionAddOrEditUser(){
        if(isset($_POST['id'])){
            $id = $_POST['id'];
            $firstName = $_POST['firstname'];
            $lastname = $_POST['lastname'];
            $username = $_POST['username'];
            $phone = $_POST['phone'];
            $email = $_POST['email'];
            $userRole = Role::find()->where(['roleName' => 'user'])->one();
            if($id>0){
                $user = User::findOne($id);
                $user->firstName = $firstName;
                $user->lastName = $lastname;
                $user->username = $username;
                $user->phone = $phone;
                $user->email = $email;
                $user->setPassword('123456');
                $user->role_id = $userRole['id'];
                $user->save();
            }
            else{
                $user = new User();
                $user->firstName = $firstName;
                $user->lastName = $lastname;
                $user->username = $username;
                $user->phone = $phone;
                $user->email = $email;
                $user->setPassword('123456');
                $user->role_id = $userRole['id'];
                $user->save();
            }



            return Json::encode('success');



        }
    }

    public function actionDeleteUser(){
        if(isset($_POST['id'])){
            $user = User::findOne($_POST['id']);
            $user->delete();
        }
    }

    public function actionResetPassword(){
        if(isset($_POST['id'])){
            $user = User::findOne($_POST['id']);
            $user->password_hash = Yii::$app->security->generatePasswordHash('123456');
            $user->save();
        }
    }

    public function actionIncomeCategories(){
        $this->view->title = 'Admin | Категории Дохода';
        $categories = IncomeCategory::find()->asArray()->all();

        return $this->render('incomeCategories', compact('categories'));
    }

    public function actionAddOrEditIncomeCategory(){
        if(isset($_POST['id'])){
            $id = $_POST['id'];
            $title = $_POST['title'];
            $description = $_POST['description'];
            if($id>0){
                $category = IncomeCategory::findOne($id);
                $category->incomeCategory = $title;
                $category->description = $description;
                $category->save();
            }
            else{
                $category = new IncomeCategory();
                $category->incomeCategory = $title;
                $category->description = $description;
                $category->save();
            }
            return Json::encode('success');
        }
    }

    public function actionDeleteIncomeCategory(){
        if(isset($_POST['id'])){
            $category = IncomeCategory::findOne($_POST['id']);
            $category->delete();
        }
    }

    public function actionOutcomeCategories(){
        $this->view->title = 'Admin | Категории Дохода';
        $categories = OutcomeCategory::find()->asArray()->all();

        return $this->render('outcomeCategories', compact('categories'));
    }

    public function actionAddOrEditOutcomeCategory(){
        if(isset($_POST['id'])){
            $id = $_POST['id'];
            $title = $_POST['title'];
            $description = $_POST['description'];
            if($id>0){
                $category = OutcomeCategory::findOne($id);
                $category->outcomeCategory = $title;
                $category->description = $description;
                $category->save();
            }
            else{
                $category = new OutcomeCategory();
                $category->outcomeCategory = $title;
                $category->description = $description;
                $category->save();
            }
            return Json::encode('success');
        }
    }

    public function actionDeleteOutcomeCategory(){
        if(isset($_POST['id'])){
            $category = OutcomeCategory::findOne($_POST['id']);
            $category->delete();
        }
    }

    public function actionDeleteIncomeOperation(){
        if(isset($_POST['id'])){
            $category = IncomeOperation::findOne($_POST['id']);
            $category->delete();
        }
    }

    public function actionDeleteOutcomeOperation(){
        if(isset($_POST['id'])){
            $category = OutcomeOperation::findOne($_POST['id']);
            $category->delete();
        }
    }

}